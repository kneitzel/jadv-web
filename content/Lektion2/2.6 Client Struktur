---
title: 2.6 Client Struktur
---

Nun ist es endlich an der Zeit, den eigentlichen Client zu schreiben. Bei GUI Anwendungen ist es üblich, die Funktionalität nach einem Entwurfsmusster aufzuteilen. In unserem Programm wollen wir das MVC (Model-View-Controller) Entwurfsmuster umsetzen.

# MVC (Model-View-Controller)
Bei dem Model-View-Controller Entwurfsmuster haben wir eine Aufteilung der Funktionalität in drei Bereiche:

## Model
Das Model enthält in erster Linie die Daten, die angezeigt werden bzw. die eingegeben werden. Die hier verwendeten Klassen können auch Business-Logik und andere Funktionalitätem beinhalten, aber diese spielen bei der Nutzung im MVC Pattern keien Rolle.

## View
Die View ist zuständig für das Anzeigen der Daten und die Entgegennahme von Anwender Aktionen. Um die Daten anzeigen zu können, kennt die View das Model. Auf die Aktionen des Anwenders reagiert die View selbst nicht. Statt dessen stellt die View diese Aktionen über das Observer-Pattern zur Verfügung. Weiterhin registriert sich die View als Observer bei dem Model um bei Veränderungen des Models die Anzeige anpassen zu können.

## Controller
Der Controller kennt das Model und die View. So stellt er alle benötigten Daten im Model zur Verfügung und stellt diese der View zur Verfügung. Um Aktionen des Anwenders verarbeiten zu können, registriert sich der Controller bei der View um die Events zu bearbeiten.

Das MVC Entwurfsmuster wird im Anhang im Detail erläutert. Ebenso findet sich die Dokumentation der bereitgestellten Klassen Model, View und Controller, auf die wir im weiteren Verlauf zurück greifen, im Anhang.

# Struktur der Anwendung

Die Struktur der Anwendung umfasst:
- eine main Routine zum Start des Clients
- Ein Anwendungsfenster, welches den Level anzeigen soll. Dieses wird dargestellt / kontrolliert über die Klassen ApplicationController, ApplicationView und ApplicationModel.
- Damit die View User-Aktionen melden kann, brauchen wir noch mögliche Aktionen. Dazu erstellen wir eine Enumeration ApplicationCommands mit den Aktionen, in den Level hinein oder hinaus zu zoomen und den gezeigten Ausschnitt des Levels zu verschieben.
- Damit ein Level angezeigt werden kann, brauchen wir noch eine Klasse, die die Bilder berreit hält.

Das Model enthält die Informationen, die zur Anzeige wichtig sind:
- den Level
- die Verwaltung der Bilder
- das aktuelle Scaling (Zoom-Faktor in %)
- die Position der linken oberen Ecke zur Anzeige des richtigen Ausschnitts.

Damit erhalten wir direkt die ApplicationModel Klasse
```java
package org.jadv.client;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import org.jadv.framework.Model;
import org.jadv.model.level.Level;

/**
 * Model of the Application Window.
 */
@Getter
@Setter
@ToString
public class ApplicationModel extends Model {

    /**
     * Current level
     */
    private Level level;

    /**
     * ScaleFactor in percent
     */
    private int scaleFactor = 100;

    /**
     * X Coordinate of level in upper left corner
     */
    private int x = 0;

    /**
     * Y coordinate of level in upper left corner
     */
    private int y = 0;

    /**
     * Store for images
     */
    @Setter
    private ImageStore imageStore;
}
```
