<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAdventure - Kurs zur Softwareentwicklung in Java on JAdventure - Kurs zur Softwareentwicklung</title>
    <link>https://jadventure.de/</link>
    <description>Recent content in JAdventure - Kurs zur Softwareentwicklung in Java on JAdventure - Kurs zur Softwareentwicklung</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language><atom:link href="https://jadventure.de/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://jadventure.de/datenschutz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/datenschutz/</guid>
      <description>Verantwortlich / Ansprechpartner Konrad Neitzel
Bornstr. 5
61250 Usingen
eMail: konrad@kneitzel.de
Datenschutz ist mir wichtig! So vermeide ich – soweit möglich – die Verwendung von Add-Ons und Tools, die Anwender tracken.
Cookies Diese Webseite ist eine statische Webseite und somit sind keine Cookies notwendig.
Links Ich verweise auch auf andere Sites. Wenn Sie einem Link folgen, dann übermitteln sie personenbezogene Daten (z.B. Ihre IP Ardesse) an den Zielserver, der diese dann auswerten kann.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jadventure.de/impressum/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/impressum/</guid>
      <description>Die Webseite https://jadventure.de ist die persönliche Webseite von Konrad Neitzel.
Die Webseite wird betrieben von Konrad Neitzel
Bornstraße 5
61250 Usingen
Telefon: +49 (1575) 83 16 414
eMail: konrad@kneitzel.de
Inhaber und Webmaster: Konrad Neitzel
Für den Inhalt verantwortlich: Konrad Neitzel
Copyright Alle Texte, Logos und Grafiken unterliegen dem Urheberrecht. Die Seiten dürfen nur nach vorheriger schriftlicher Einwilligung zum eigenen Gebrauch vervielfältigt, geändert, gedruckt, weitergegeben oder in sonstiger Art und Weise reproduziert werden.</description>
    </item>
    
    <item>
      <title>1.1. Vision</title>
      <link>https://jadventure.de/Lektion1/1.Vision/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Lektion1/1.Vision/</guid>
      <description>JAdventure Vision PeerTube (extern) YouTube (extern) PowerPoint Präsentation JAdventure Vision JAdventure soll ein MMORPG werden, also ein Massive Multiplayer Online Role Playing Game. Es soll eine virtuelle Spielwelt geben welche mit 2D Grafiken angezeigt wird. In der Welt soll es Lebewesen geben: Teilweise vom Computer gesteuert (NPC = Non Player Character), teilweise vom Spieler gesteuert. Es gibt im Spiel Gegenstände.
Es sind Interaktionen möglich:
Spieler können Gegenstände aufheben (so vom Gegenstand vorgesehen) Spieler können Gegenstände nutzen (z.</description>
    </item>
    
    <item>
      <title>1.2. Schritte</title>
      <link>https://jadventure.de/Lektion1/2.Schritte/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Lektion1/2.Schritte/</guid>
      <description>Den Umfang dieses Abschnitts halten wir kurz und notieren hier nur die Schritte, die wir wirklich als Erstes angehen werden.
In dem Spiel soll es Level geben. Diese sollen ein rechteckiges Gebiet fester Größe darstellen. Level haben einen eindeutigen Namen, der ein Level identifiziert. In einem Level können an beliebigen Stellen Elemente sein. In dem Spiel gibt es Gegenstände. Gegenstände haben einen Namen, eine Ausdehnung und eine Position in dem übergeordneten Objekt.</description>
    </item>
    
    <item>
      <title>1.3. Tasks / TODO Liste</title>
      <link>https://jadventure.de/Lektion1/3.Tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Lektion1/3.Tasks/</guid>
      <description>Im nächsten Schritt wird der Arbeitsumfang für den folgenden Implementationsschritt festgelegt. Von den erfassten Schritten nehmen wir die ersten paar, die gut zusammen passen und sich gut zusammen entwickeln lassen werden:
In dem Spiel soll es Level geben. Diese sollen ein rechteckiges Gebiet fester Größe darstellen. Level haben einen eindeutigen Namen, der ein Level identifiziert. In einem Level können an beliebigen Stellen Elemente sein. In dem Spiel gibt es Gegenstände. Gegenstände haben einen Namen, eine Ausdehnung und eine Position in dem übergeordneten Objekt.</description>
    </item>
    
    <item>
      <title>1.4.1 Projekt in IntelliJ anlegen</title>
      <link>https://jadventure.de/Lektion1/4.-Implementation/1.4.1-NewProject/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Lektion1/4.-Implementation/1.4.1-NewProject/</guid>
      <description>Neues Projekt erstellen Wir erstellen in IntelliJ ein neues Maven Projekt. Dazu reicht es es aus, einfach unter New Project folgende Auswahl zu treffen:
(Die Lokation ist das Parent-Verzeichnis für das Projekt. Dieses bitte nach eigenen Bedürfnissen anpassen!)
Maven Wrapper Um auch auf der Kommandozeile das Projekt bauen zu können, starten wir über das Maven Toolfenster ein wrapper:wrapper Lauf. Dabei wird der Maven Wrapper dem Projekt hinzugefügt. (Wenn Du das Projekt von GitHub hädst, dann kannst Du diesen Punkt auch überspringen!</description>
    </item>
    
    <item>
      <title>1.4.2 Entities</title>
      <link>https://jadventure.de/Lektion1/4.-Implementation/1.4.2-Entities/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Lektion1/4.-Implementation/1.4.2-Entities/</guid>
      <description>LEVEL Aus den Beschreibungen entnehmen wir erst einmal, dass ein Level die folgenden Attribute haben soll
String name int width int height List&amp;lt;GameObject&amp;gt; childs Damit lässt sich relativ einfach und schnell eine Klasse Level schreiben:
/** * JAdventure Level */ @Getter @NoArgsConstructor @AllArgsConstructor @ToString @EqualsAndHashCode public class Level { /** * Name of the Level. */ private String name; /** * Width of the level. */ private int width; /** * Height of the level.</description>
    </item>
    
    <item>
      <title>1.4.3 Serialisierung</title>
      <link>https://jadventure.de/Lektion1/4.-Implementation/1.4.3-Serialisierung/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Lektion1/4.-Implementation/1.4.3-Serialisierung/</guid>
      <description>Einfache Serialisierung mit Gson Serialisierung von abgeleiteten Klassen Speichern des Namens der Klasse Adapter für SavedObject Serialisieren einer SavedObject instanz Deserialisieren Veränderungen an den Entities Zweites Problem: Zirkuläre Referenz Interface Container Serialisierung von Listen mit GameObjects Einfache Serialisierung mit Gson Die Serialisierung mit Gson ist relatov einfach und gradlinig. So kann ein Level einfach serialisiert und deserialisiert werden:
Gson gson = new Gson(); Level level = ....; // Beliebige Initialisierung String json = gson.</description>
    </item>
    
    <item>
      <title>1.4.4 Unit Test</title>
      <link>https://jadventure.de/Lektion1/4.-Implementation/1.4.4-UnitTests/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Lektion1/4.-Implementation/1.4.4-UnitTests/</guid>
      <description>Testumfang Level SavedObjectAdapter Test der Serialisierung Test der Serialisierung mit SavedObject Test der Deserialisierung Test des Fehlers: Klasse nicht vorhanden ListOfSavedObjectAdapter Serialisierung Deserialisierung Test Objekte Wenn wir irgend welchen Code schreiben, dann müssen wir diesen auch testen. Dabei haben wir mehrere Möglichkeiten:
Manuelle Tests Es ist natürlich immer möglich, dass man manuell ein paar Tests durchführt. Dazu wird z.B. die Anwendung gestartet und werden die Funktionalitäten manuell durchgetestet.
Dies bringt aber einige Nachteile mit sich:</description>
    </item>
    
    <item>
      <title>1.4.5 Entities und Klassendiagramm</title>
      <link>https://jadventure.de/Lektion1/4.-Implementation/1.4.5-Klassendiagramm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Lektion1/4.-Implementation/1.4.5-Klassendiagramm/</guid>
      <description>Die Klassen SavedObject Container Level GameObject Size CircleSize RectangleSize Position SavedObjectAdapter ListOfSavedObjectAdapter Klassendiagramm Die Klassen SavedObject package org.jadv.model; import com.google.gson.annotations.JsonAdapter; import lombok.EqualsAndHashCode; import lombok.Getter; import org.jadv.serialization.SavedObjectAdapter; /** * An instance that can be saved through an Adapter and contains the name of the class as field. */ @EqualsAndHashCode @JsonAdapter(SavedObjectAdapter.class) public abstract class SavedObject { /** * Class name of the instance. */ @Getter private final String type = getClass().getName(); } Container package org.</description>
    </item>
    
    <item>
      <title>1.4.6 Übungen</title>
      <link>https://jadventure.de/Lektion1/4.-Implementation/1.4.6-U%CC%88bungen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Lektion1/4.-Implementation/1.4.6-U%CC%88bungen/</guid>
      <description>Das Projekt bis hier her noch einmal selbst nachbauen Unit Test für Level.getChildren Hier finden sich ein paar Dinge, die Du machen kannst um die Elemente dieser Lektion zu vertiefen oder zu verinnerlichen.
Fragen kannst Du gerne im Java Forum stellen oder mir per Email an konrad@kneitzel.de senden.
Das Projekt bis hier her noch einmal selbst nachbauen Einfach einmal selbst ein neues Projekt starten und die Klassen einmal selbt schreiben.</description>
    </item>
    
    <item>
      <title>A1 - Versionierung des Kurses</title>
      <link>https://jadventure.de/Anhang/A1-history/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Anhang/A1-history/</guid>
      <description> Version Datum Veränderung 0.0.6 31.01.2023 Übungen am Ende eingefügt. Dokumentation Unit Tests. 0.0.5 30.01.2023 Überarbeitung PowerPoint Folien, Dokumentation Implementation 0.0.4 14.01.2023 Vorbereitung weitere Anhänge (Maven / Clean Code) 0.0.3 13.01.2023 Shortcodes / Partials für Flaggen und Einbindung Videos. 0.0.2 12.01.2023 Erste Vision vom JAdventure Projekt Anhang: Abkürzungen Flaggen bei externen Links zur Anzeige der Sprache Überarbeitung Lektion 1 Übersicht 0.0.1 11.01.2023 Erstellung des Hugo Rahmens Planung der Struktur Gitea Repository für Hugo Sourcen und Website konfiguriert </description>
    </item>
    
    <item>
      <title>A2 - Abkürzungen</title>
      <link>https://jadventure.de/Anhang/A2-abkuerzungen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Anhang/A2-abkuerzungen/</guid>
      <description> JSON JavaScript Object Notation MMORPG Massive Multiplayer Online Role Playing Game NPC Non Player Character, vom Computer gesteuerte Figur. </description>
    </item>
    
    <item>
      <title>A3 - Verwendete Technologien</title>
      <link>https://jadventure.de/Anhang/A3-technology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Anhang/A3-technology/</guid>
      <description> Website Hugo (extern) Ein Generator für statische Webseiten. Geekdocs (extern) Ein Hugo Template unter MIT Lizenz. Gitea (extern) Ein selbst gehosteter Git Service. Erstellung von Medien-Inhalten OBS Studio (extern) für Videoaufnahmen. iMovie von Apple zum Video-Schnitt und der Audio Nachbearbeitung Abricotine (extern) - ein Open Source Markdown Editor Apple MacBook Pro M1 UR 22 mk II von Steinberg zur Steuerung meine Microfons Entwicklung IntelliJ (extern) als Entwicklungsumgebung Maven (extern) als Build-Werkzeug </description>
    </item>
    
    <item>
      <title>B1 - Agiles Arbeiten</title>
      <link>https://jadventure.de/Anhang/B1-AgilesArbeiten/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Anhang/B1-AgilesArbeiten/</guid>
      <description>TODO</description>
    </item>
    
    <item>
      <title>B2 - Clean Code (Übersicht)</title>
      <link>https://jadventure.de/Anhang/B2-clean-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Anhang/B2-clean-code/</guid>
      <description> TODO </description>
    </item>
    
    <item>
      <title>C1 - Gson</title>
      <link>https://jadventure.de/Anhang/C1-gson/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Anhang/C1-gson/</guid>
      <description>Wichtig Die Codebeispiele in dieser Beschreibung sind natürlich angelehnt an das Projekt, aber der Code im Projekt weicht von den Beispielen ab! Ein oft genutztes Format um Daten zu speichern oder zu übertragen ist JSON (JavaScript Object Notation - JSON auf Wikipedia (extern) ).
Für die Umwandlung von Java Objekten in JSON oder zurück gibt es mehrere Libraries. Die am meisten genutzt dürften Jackson und Gson sein. In diesem Kurs werden wir für diese Aufgabe auf Gson zurück greifen.</description>
    </item>
    
    <item>
      <title>C2 - Maven (Übersicht)</title>
      <link>https://jadventure.de/Anhang/C2-maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/Anhang/C2-maven/</guid>
      <description> TODO </description>
    </item>
    
    <item>
      <title>Konrad Neitzel</title>
      <link>https://jadventure.de/contact/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jadventure.de/contact/</guid>
      <description>Sie erreichen mich:
Email: konrad@kneitzel.de Telefon: +49 (1575) 83 16 414 KonradN bei https://java-forum.org Social Media Mastodon @konrad@mastodon.kneitzel.de PeerTube https://cliptube.org/a/konradn YouTube https://www.youtube.com/@KonradN Spendenmöglichkeit Falls sie meine Arbeit mit einer Spende unterstützen wollen:
Paypal konrad@kneitzel.de </description>
    </item>
    
  </channel>
</rss>
